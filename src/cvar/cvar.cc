#include "../cvar/cvar.h"

#include "../memory/allocated_memory.h"
#include "../memory/shared_ptr.h"

namespace snuffbox
{
	//-------------------------------------------------------------------------------------------
	CVar::CVar()
	{

	}

	//-------------------------------------------------------------------------------------------
	CVar* CVar::Instance()
	{
		static SharedPtr<CVar> cvar = AllocatedMemory::Instance().Construct<CVar>();
		return cvar.get();
	}

	//-------------------------------------------------------------------------------------------
	CVar::~CVar()
	{

	}

	//-------------------------------------------------------------------------------------------
	CVar::Value::Value(ValueTypes type) :
		type_(type)
	{

	}

	//-------------------------------------------------------------------------------------------
	bool CVar::Value::IsBool()
	{
		return type_ == ValueTypes::kBoolean;
	}

	//-------------------------------------------------------------------------------------------
	bool CVar::Value::IsNumber()
	{
		return type_ == ValueTypes::kNumber;
	}

	//-------------------------------------------------------------------------------------------
	bool CVar::Value::IsString()
	{
		return type_ == ValueTypes::kString;
	}
	
	//-------------------------------------------------------------------------------------------
	template<typename T>
	T CVar::Value::As()
	{
		return static_cast<T>(this);
	}

	//-------------------------------------------------------------------------------------------
	CVar::Value::~Value()
	{

	}

	//-------------------------------------------------------------------------------------------
	CVar::Boolean::Boolean(bool value) :
		CVar::Value(CVar::ValueTypes::kBoolean),
		value_(value)
	{

	}

	//-------------------------------------------------------------------------------------------
	const bool& CVar::Boolean::value() const
	{
		return value_;
	}

	//-------------------------------------------------------------------------------------------
	void CVar::Boolean::set_value(bool value)
	{
		value_ = value;
	}

	//-------------------------------------------------------------------------------------------
	CVar::Boolean::~Boolean()
	{

	}

	//-------------------------------------------------------------------------------------------
	CVar::Number::Number(double value) :
		CVar::Value(CVar::ValueTypes::kNumber),
		value_(value)
	{

	}

	//-------------------------------------------------------------------------------------------
	const double& CVar::Number::value() const
	{
		return value_;
	}

	//-------------------------------------------------------------------------------------------
	void CVar::Number::set_value(double value)
	{
		value_ = value;
	}

	//-------------------------------------------------------------------------------------------
	CVar::Number::~Number()
	{

	}

	//-------------------------------------------------------------------------------------------
	CVar::String::String(std::string value) :
		CVar::Value(CVar::ValueTypes::kString),
		value_(value)
	{

	}

	//-------------------------------------------------------------------------------------------
	const std::string& CVar::String::value() const
	{
		return value_;
	}

	//-------------------------------------------------------------------------------------------
	void CVar::String::set_value(std::string value)
	{
		value_ = value;
	}

	//-------------------------------------------------------------------------------------------
	CVar::String::~String()
	{

	}
}